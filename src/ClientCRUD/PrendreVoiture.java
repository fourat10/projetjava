/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package ClientCRUD;

import Classes.Client;
import java.sql.Connection;
import javax.swing.JOptionPane;
import java.sql.*;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JInternalFrame;
/**
 *
 * @author DELL
 */
public class PrendreVoiture extends javax.swing.JInternalFrame {
    private javax.swing.JDesktopPane jDesktopPane1;
    private Connection con;
    private Client client;
    
    public PrendreVoiture(javax.swing.JDesktopPane jDesktopPane1,Connection c,Client cl) {
        this.jDesktopPane1=jDesktopPane1;
        this.con=c;
        this.client=cl;
        initComponents();
                
    }

    /**
     * Creates new form PrendreVoiture
     */
    public PrendreVoiture() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        code = new javax.swing.JTextField();
        prendrebtn = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);

        jLabel1.setText("code de reservation");

        prendrebtn.setText("PRENDRE VOITURE");
        prendrebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prendrebtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(206, 206, 206)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(code)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(195, 195, 195)
                        .addComponent(prendrebtn)))
                .addContainerGap(271, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(code, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80)
                .addComponent(prendrebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(100, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public boolean verifdate(java.sql.Date datedebut,java.sql.Date datefin){
        java.util.Date currentDate = new java.util.Date();
        if(datedebut == null ){
            JOptionPane.showMessageDialog(null, " cette location est deja annulee !!! ", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }else{
            // Create Calendar instances
            Calendar currentCal = Calendar.getInstance();
            Calendar debCal = Calendar.getInstance();
            Calendar finCal = Calendar.getInstance();

            // Set time components to 0 for currentDate, datedeb, and datefin
            currentCal.setTime(currentDate);
            currentCal.set(Calendar.HOUR_OF_DAY, 0);
            currentCal.set(Calendar.MINUTE, 0);
            currentCal.set(Calendar.SECOND, 0);
            currentCal.set(Calendar.MILLISECOND, 0);

            debCal.setTime(datedebut);
            debCal.set(Calendar.HOUR_OF_DAY, 0);
            debCal.set(Calendar.MINUTE, 0);
            debCal.set(Calendar.SECOND, 0);
            debCal.set(Calendar.MILLISECOND, 0);
            
            finCal.setTime(datefin);
            finCal.set(Calendar.HOUR_OF_DAY, 0);
            finCal.set(Calendar.MINUTE, 0);
            finCal.set(Calendar.SECOND, 0);
            finCal.set(Calendar.MILLISECOND, 0);
            
            if((currentCal.after(debCal) || currentCal.equals(debCal) ) && (currentCal.before(finCal) || currentCal.equals(finCal) ) ){
                return true;
            }else{
                if(currentDate.before(datedebut)){
                    JOptionPane.showMessageDialog(null, " Vous êtes trop tôt pour prendre votre voiture !!! ", "Error", JOptionPane.ERROR_MESSAGE);
                }else if (currentDate.after(datefin)){
                    JOptionPane.showMessageDialog(null, " vout n'avais pas le droit de prendre cette location ", "Error", JOptionPane.ERROR_MESSAGE);
                }
                return false;
            }
        }
    }
    
    public boolean verify_deja_payee(String id_location){
        String sql="SELECT * FROM paiment WHERE ID='"+id_location+"'";
        
        Statement stmt;
        try {
            stmt = con.createStatement();
            ResultSet res = stmt.executeQuery(sql);
            if(res.next()){
                return false;
            }else{
                return true;
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(PayerLocation.class.getName()).log(Level.SEVERE, null, ex);
        }
        return true;
        
        
    }
    
    private void prendrebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prendrebtnActionPerformed
        String id_location  = code.getText();
        
        String sql = "SELECT * FROM location WHERE ID='"+id_location+"'";
        try {
            Statement stmt = con.createStatement();
            ResultSet res= stmt.executeQuery(sql);
            
            if(res.next()){
                String cin=res.getString("CIN");
                java.sql.Date datedeb=res.getDate("date_debut");
                java.sql.Date datefin=res.getDate("date_fin");
                //verifier si elle est deja payee dans le tableau paiment 
                //if(!verify_deja_payee(id_location)){
                if(res.getString("num_carte_bancaire")!=null){
                    JOptionPane.showMessageDialog(null, " cette location est deja prise et payee ", "Error", JOptionPane.ERROR_MESSAGE);

                }else{
                    
                

                if(cin.equals(client.getCin()) ){
                    if(verifdate(datedeb,datefin)){
                        
                    
                    String matricule = res.getString("matricule");
                    System.out.println(matricule);
                    sql="SELECT * FROM voiture WHERE matricule = '"+matricule+"'";
                    res.close();
                    res = stmt.executeQuery(sql);
                    String etat="";
                    String disponibilite="";

                    int nb_fois_louee =0;
                    float prix=0;
                    String marque="";
                    String model="";

                    if(res.next()){
                        etat = res.getString("etat");
                        disponibilite=res.getString("disponibilite");
                        nb_fois_louee = res.getInt("nb_fois_louee");
                        prix=res.getFloat("prix");
                        marque=res.getString("marque");
                        model=res.getString("model");

                    }
                    if(etat.equals("en marche") && disponibilite.equals("disponible")){
                        nb_fois_louee ++;
                              
                        /*JInternalFrame[] frames = jDesktopPane1.getAllFrames();
                        for (JInternalFrame frame : frames) {
                             frame.dispose(); // Close the internal frame
                        }*/
                        
                        
                        
                        // Convert to milliseconds
                        long millisecondsInDay = 1000 * 60 * 60 * 24; // Number of milliseconds in a day
                        long datedebMillis = datedeb.getTime();
                        long datefinMillis = datefin.getTime();

                        // Calculate the difference in days
                        long differenceInMillis = datefinMillis - datedebMillis;
                        int differenceInDays = (int) (differenceInMillis / millisecondsInDay)+1;

                        
                        
                        PayerLocation adc=new PayerLocation(jDesktopPane1,con,client,nb_fois_louee,id_location,differenceInDays,prix,matricule,marque,model
                        ,datedeb.toString(),datefin.toString());
                        jDesktopPane1.removeAll();
                        jDesktopPane1.updateUI();//bech tsaker w thel haja jdida
                        jDesktopPane1.add(adc);
                        adc.show();
                        
                        
                            
                    }else{
                        // insertion du donner de remboursement 
                        sql = "INSERT INTO remboursement (id_location,montant,date_remboursement) VALUE (?,?,CURDATE())";
                        PreparedStatement pstmt = con.prepareStatement(sql);
                        pstmt.setString(1,id_location);
                        pstmt.setDouble(2, 100);
                        pstmt.executeUpdate();
                        System.out.println("Data inserted successfully into remboursement table.");
                       
                        //modification des donner dans la table location ( rendre les champs null sauf ID et CIN)
                        
                        
                        sql = "UPDATE location SET matricule = null, date_debut = null, date_fin = null WHERE ID = '" + id_location + "'";

                        
                        stmt.executeUpdate(sql);
                        
                        
                        JOptionPane.showMessageDialog(null," DESOLEE VOTRE VOITURE N'EST PAS ENCORE DISPONIBLE "
                                + "VOICI UN REMBOURCEMENT DE 100 DT");
                    }
                }
                    
                }else{
                     JOptionPane.showMessageDialog(null,"CETTE LOCATION N'EST PAD RESERVEE PAR VOUS "
                             + "VEILLER VERIFIER VOTRE CODE DE LOCATION ");
                }
                }
                
            }else{
                JOptionPane.showMessageDialog(null,"PAS DE LOCATION AVEC CE CODE "
                        + "VEILLEZ VERIFIER VOTRE CODE DE LOCATION  !!!");

            }
            
        } catch (SQLException ex) {
            Logger.getLogger(PrendreVoiture.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        


    }//GEN-LAST:event_prendrebtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField code;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton prendrebtn;
    // End of variables declaration//GEN-END:variables
}
